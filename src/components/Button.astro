---
interface ButtonProps {
  variant?: "primary" | "secondary" | "tertiary";
  size?: "small" | "medium" | "large";
  text?: string;
  [key: string]: any;
  id?: string;
}

const {
  variant = "primary",
  size = "medium",
  text = "",
  class: customClass = "",
  id,
  ...props
} = Astro.props as ButtonProps;

const variantClassMap = {
  primary:
    "bg-[var(--color-primary)] text-[var(--color-primary-contrast)] border-none",
  secondary:
    "bg-[var(--color-secondary)] text-[var(--color-primary-contrast)] border-none",
  tertiary:
    "bg-transparent text-[var(--color-primary)] border border-[var(--color-primary)]",
};
const sizeClassMap = {
  small: "px-3 py-1 text-sm",
  medium: "px-5 py-2 text-base",
  large: "px-7 py-3 text-lg",
};

const variantClass = variantClassMap[variant] || "";
const sizeClass = sizeClassMap[size] || "";

const baseClass =
  "rounded-full font-semibold transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 transition-transform active:scale-95";
---

<button
  class={`${baseClass} ${variantClass} ${sizeClass} ${customClass}`.trim()}
  style="will-change: transform;"
  onmousedown="this.classList.add('active')"
  onmouseup="this.classList.remove('active')"
  onmouseleave="this.classList.remove('active')"
  id={id}
  {...props}
>
  {Astro.slots.default ? <slot /> : text}
</button>

<style>
  button.active {
    transform: scale(0.95);
    transition: transform 0.1s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>
